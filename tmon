#!/usr/bin/env bash
sudo=sudo
tmp_path="/tmp/tmon-$(whoami)"

function _abspath() {
  if [ -z "$1" ]; then return; fi
  dirname=$(cd "$(dirname "$1")"; pwd)
  basename=$(basename "$1")
  echo "$dirname/$basename"
}

function _prepare_tmp() {
  if [ ! -d "$tmp_path" ]; then
    if [ -e "$tmp_path" ]; then rm -f "$tmp_path"; fi
    mkdir -p "$tmp_path"
  fi
}

function _check_monitor_arg() {
  while [ $# -gt 0 ]; do
    if [ $(expr index "$1" :) -ne 0 ]; then echo 1; fi
    shift
  done
  echo 0
}

function _escape_monitor_arg() {
  echo "$1" | sed "s/|/ /g"
}

function _get_monitor_file() {
  echo "$tmp_path/monitor"
}

function _monitor_file_check() {
  _prepare_tmp
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then touch "$monitor_file"; fi
  num_lines=0
  while IFS= read -r line; do
    line_array=()
    IFS="|" read -r -a line_array <<< "$line"
    pid="${line_array[2]}"
    if [ -z "$pid" ]; then
      echo "$line"
      num_lines=$(expr $num_lines + 1)
    else
      if kill -0 "$pid" 2>/dev/null; then
        echo "$line"
        num_lines=$(expr $num_lines + 1)
      else
        temp_index="${line_array[3]}"
        if [ -n "$temp_index" ]; then
          tmp_stdout=$(_get_tmp_stdout "$temp_index")
          if [ -f "$tmp_stdout" ]; then rm -f "$tmp_stdout"; fi
          tmp_stderr=$(_get_tmp_stderr "$temp_index")
          if [ -f "$tmp_stderr" ]; then rm -f "$tmp_stderr"; fi
        fi
      fi
    fi
  done < "$monitor_file" | tee "$monitor_file" >/dev/null
}

function _monitor_append() {
  _prepare_tmp
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then touch "$monitor_file"; fi
  if [ $(_check_monitor_arg "$@") -ne 0 ]; then return; fi
  (IFS="|"; echo "$*" >> "$monitor_file")
}

function _monitor_clear() {
  if [ -d "$tmp_path" ]; then
    rm -r "$tmp_path"
  fi
}

function _get_monitored_files() {
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then return; fi
  if [ -z "$1" ]; then num="+0"; else num="$1"; fi
  _monitor_file_check
  tail -n "$num" "$monitor_file" | while IFS= read -r line; do
    echo "$line"
  done
}

function _get_tmp_stdout() {
  if [ -z "$1" ]; then return; fi
  echo "${tmp_path}/$1.out"
}

function _get_tmp_stderr() {
  if [ -z "$1" ]; then return; fi
  echo "${tmp_path}/$1.err"
}

function _get_tmp_index() {
  _prepare_tmp
  init_index=$RANDOM
  tmp_index=$(expr $(expr $init_index + 1) % 32768 )
  while [ $tmp_index != $init_index ]; do
    if [ ! -e $(_get_tmp_stdout "$tmp_index") -a ! -e $(_get_tmp_stderr "$tmp_index") ]; then
      echo "$tmp_index"
      return
    fi
    tmp_index=$(expr $(expr $tmp_index + 1) % 32768)
  done
  echo ""; return
}

function _start_session() {
  tmux new -d
  tmux set status-style "bg=black,fg=green"
  tmux set pane-border-format "#{pane_title}"
  tmux set pane-border-status top
}

function _set_layout() {
  tmux select-layout main-vertical
  tmux select-pane -t 0
  tmux select-pane -T ""
  tmux resize-pane -x 50% 2>/dev/null
  if [ $? -ne 0 ]; then
	width=$(tmux display-message -p "#{window_width}" 2>/dev/null)
	if [ -n width ]; then tmux resize-pane -x $(expr "${width}" / 2); fi
  fi
}

function _is_attached() {
  if [ -z "$1" ]; then
    sessionid=$(tmux display -p '#S') || sessionid=-1
    if [ ${sessionid} == -1 ]; then return 0; fi
  else
    sessionid=$1
  fi
  attached=$(tmux ls -F '#{session_attached}@#{session_name}' | grep "@${sessionid}" | sed 's/@[0-9]*//g')
  if [ "$attached" == 1 ]; then return 1; fi
  return 0
}

function is_attached() {
  _is_attached "$@" 2>/dev/null
  echo $?
}

function in_session() {
  if [ -n "$TMUX" ]; then echo 1; else echo 0; fi
}

function exit_session() {
  _is_attached 2>/dev/null
  if [ $? == 1 ]; then tmux kill-session; fi
}

function current_pane() {
  if [ -z "$TMUX_PANE" ]; then
    echo -1
  else
    echo $(tmux list-panes -F "#P@#D" | grep "@$TMUX_PANE" | sed "s/@$TMUX_PANE//g")
  fi
}

function _find_panes_by_title() {
  if [ -z "$1" ]; then return; fi
  echo $(tmux list-panes -F "#P:#T" | grep -E "^[0-9]+:.*?$1.*$" | sed "s/:.*//g")
}

function _clear_panes_help() {
  print '%s\n' 'tmon clear [-a | --all] [-h | --help]' \
               'Close all panes.' \
               '' \
               '  -a, --all     Remove file monitors.' \
               '  -h, --help    Display this help and exit.' \
               '' \
               'Examples:' \
               '  tmon clear -a    Close all panes and remove all file monitors.'
               ''
  exit
}

function clear_panes() {
  ARGUMENTS=$(getopt -o "a,h" -l "all,help" -- "$@") || _clear_panes_help
  eval "set -- ${ARGUMENTS}"
  
  args=()
  clear_cache=false
  while [ $# -gt 0 ]; do
    case "$1" in
      -a|--all)
        clear_cache=true
        shift
        ;;
      -h|--help)
        _clear_panes_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  if [ $(current_pane) != 0 ]; then tmux swap-pane -U; fi
  tmux kill-pane -a -t 0
  if [ $clear_cache == true ]; then _monitor_clear; fi
}

function _tmon_monitor_help() {
  printf '%s\n' 'tmon monitor [-c | --clear] [-s | --sudo] [-h | --help] [NPANES]' \
                '' \
                'Open the last NPANES monitored files. Open 2 files when NPANES is not passed.' \
                '' \
                '  -c, --clear    Close all other panes before open.' \
                '  -s, --sudo     Use sudo when opening files.' \
                '  -h, --help     Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon monitor -c 2    Clear current panes and open the last 2 monitored files' \
                ''
  exit
}

function tmon_monitor() {
  ARGUMENTS=$(getopt -o "c,s" -l "clear,sudo" -- "$@") || _tmon_monitor_help
  eval "set -- ${ARGUMENTS}"

  args=()
  use_sudo=false
  clear=false
  while [ $# -gt 0 ]; do
    case "$1" in
      -c|--clear)
        clear=true
        shift
        ;;
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -h|--help)
        _tmon_monitor_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done
  
  if [ "$clear" == true ]; then
    if [ $(current_pane) != 0 ]; then tmux swap-pane -U; fi
    tmux kill-pane -a -t 0
  fi
  
  attached=$(in_session)
  if [ $attached == 0 ]; then _start_session; fi
  
  if [ -z "${args[0]}" ]; then num_files=2; else num_files="${args[0]}"; fi
  _get_monitored_files "$num_files" | while IFS= read -r line; do
    line_array=()
    IFS="|" read -r -a line_array <<< "$line"
    file="${line_array[0]}"
    if [ -z "${line_array[1]}" ]; then title=$(basename "$file"); else title="${line_array[1]}"; fi
    if [ -f "$file" ]; then
      if [ $use_sudo == true ]; then 
        tmux split-window -v "\"$sudo\" tail -n +0 -f \"${file}\""
      else
        tmux split-window -v "tail -n +0 -f \"${file}\""
      fi
      tmux select-pane -T "[ $title ]"
    fi
  done
  _set_layout

  if [ $attached == 0 ]; then tmux attach; fi
}

function _tmon_exec_help() {
  printf '%s\n' 'tmon exec [-o] [-e] [--stdout FILE] [--stderr FILE] [-s | --sudo] [-h | --help]' \
                '          [-t | --title TITLE] [-a | --append] ARGS...' \
                '' \
                'Execute command and show output in separate tmux windows.' \
                '' \
                '  -o               Show stdout in a tmux window.' \
                '  -e               Show stderr in a tmux window.' \
                '  -s, --sudo       Use sudo when creating and opening files.' \
                '  -t, --title      Overwrite pane title with specified content.' \
                '  -a, --append     Record stdout and stderr with appending mode.' \
                '  --stdout FILE    Record stdout to FILE. Use temporary file when not specified.' \
                '  --stderr FILE    Record stderr to FILE. Use temporary file when not specified.' \
                '  -h, --help       Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon exec -e command    Execute command and show stderr.' \
                ''
  exit
}

function tmon_exec() {
  args=()
  use_sudo=false
  stdout_file=
  stderr_file=
  log_stdout=false
  log_stderr=false
  overwrite_title=false
  append=false
  title=
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -t|--title)
        overwrite_title=true
        title=$2
        shift 2
        ;;
      -h|--help)
        _tmon_exec_help
        ;;
      -o)
        log_stdout=true
        shift
        ;;
      -e)
        log_stderr=true
        shift
        ;;
      --stdout)
        stdout_file=$2
        shift 2
        ;;
      --stderr)
        stderr_file=$2
        shift 2
        ;;
      -a|--append)
        append=true
        shift
        ;;
      --)
        shift
        ;;
      *)
        args+=("$@")
        break
        ;;
    esac
  done
  
  if [ "${#args[@]}" == 0 ]; then _tmon_exec_help; fi
  
  tmp_index=
  if [ -z "$stdout_file" -o -z "$stderr_file" ]; then
    tmp_index=$(_get_tmp_index)
    if [ -z "$tmp_index" ]; then
      if [ -z "$stdout_file" ]; then stdout_file=nohup.out; fi
      if [ -z "$stderr_file" ]; then stderr_file=nohup.err; fi
    else
      stdout_file=$(_get_tmp_stdout "$tmp_index")
      stderr_file=$(_get_tmp_stderr "$tmp_index")
    fi
  fi
  
  args_string=$(_escape_monitor_arg "${args[*]}")
  if [ "$append" == true ]; then
    redirect=">>\"$stdout_file\" 2>>\"$stderr_file\""
  else
    redirect=">\"$stdout_file\" 2>\"$stderr_file\""
  fi
  if [ "$use_sudo" == true ]; then
    args=("$sudo" nohup sh -c "${args[*]} ${redirect}")
  else
    args=(nohup sh -c "${args[*]} ${redirect}")
  fi
  "${args[@]}" >/dev/null 2>/dev/null &
  pid=$!

  attached=$(in_session)
  if [ $attached == 0 ]; then _start_session; fi  

  if [ "$log_stderr" == true ]; then
    tmux split-window -v "tail -n +0 -f \"${stderr_file}\""
    if [ "$overwrite_title" == true ]; then :; else title="stderr $args_string"; fi
    if [ -n "$title" ]; then tmux select-pane -T "[ $title ]"; else tmux select-pane -T ""; fi
	abspath=$(_abspath "$stderr_file")
    _monitor_append "$abspath" "$title" "$pid" "$tmp_index"
  fi

  if [ "$log_stdout" == true ]; then
    tmux split-window -v "tail -n +0 -f \"${stdout_file}\""
    if [ "$overwrite_title" == true ]; then :; else title="stdout $args_string"; fi
    if [ -n "$title" ]; then tmux select-pane -T "[ $title ]"; else tmux select-pane -T ""; fi
	abspath=$(_abspath "$stdout_file")
    _monitor_append "$abspath" "$title" "$pid" "$tmp_index"
  fi
  
  _monitor_file_check
  _set_layout

  if [ $attached == 0 ]; then tmux attach; fi
}

function _tmon_open_help() {
  printf '%s\n' 'tmon open [-c | --create] [-C | --cut NCOLS] [-s | --sudo] [-f | --full] ' \
                '          [-t | --title TITLE] [-h | --help] [FILE]...' \
                '' \
                'Monitor files in separate tmux windows.' \
                '' \
                '  -c, --create    Create target files when not exist.' \
                '  -C, --cut       Show the file with only the first NCOLS characters preserved per row.' \
                '  -s, --sudo      Use sudo when creating and opening files.' \
                '  -f, --full      Show absolute path on pane title.' \
                '  -t, --title     Overwrite pane title with specified content.' \
                '  -h, --help      Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon open -c log.txt          Monitor log.txt with tmux. Create the file when not exist.' \
                '  tmon open -s /var/log/syslog  Monitor /var/log/syslog with root privilege.' \
                ''
  exit
}

function tmon_open() {
  ARGUMENTS=$(getopt -o "s,c,C:,f,t:,h" -l "sudo,create,cut:,full,title:,help" -- "$@") || _tmon_open_help
  eval "set -- ${ARGUMENTS}"

  args=()
  use_sudo=false
  absolute_path=false
  create=false
  overwrite_title=false
  title=
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -c|--create)
        create=true
        shift
        ;;
      -C|--cut)
        cut=$2
        shift 2
        ;;
      -f|--full)
        absolute_path=true
        shift
        ;;
      -t|--title)
        overwrite_title=true
        title=$2
        shift 2
        ;;
      -h|--help)
        _tmon_open_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  if expr "$cut" : '^[0-9]\+$' >/dev/null; then cut=" | cut -c \"-$cut\""; else cut="" ; fi

  attached=$(in_session)
  if [ $attached == 0 ]; then _start_session; fi
  
  i=0
  while (( $i < ${#args[@]} )); do
    file=${args[$i]}
    if [ ${create} == true -o -f ${file} ]; then
      if [ $use_sudo == true ]; then 
        if [ ${create} == true -a ! -e ${file} ]; then "$sudo" touch "$file"; fi
        tmux split-window -v "\"$sudo\" tail -n +0 -f \"${file}\"${cut}"
      else 
        if [ ${create} == true -a ! -e ${file} ]; then touch "$file"; fi
        tmux split-window -v "tail -n +0 -f \"${file}\"${cut}"
      fi
      abspath=$(_abspath "$file")
      if [ ${overwrite_title} == false ]; then
        if [ ${absolute_path} == true ]; then title="$abspath"; else title=$(basename "$file"); fi
      fi
      if [ -n "$title" ]; then tmux select-pane -T "[ $title ]"; else tmux select-pane -T ""; fi
      _monitor_append "$abspath" "$title"
    fi
    i=$(expr $i + 1)
  done
  _monitor_file_check
  _set_layout

  if [ $attached == 0 ]; then tmux attach; fi
}

function _tmon_kill_help() {
  printf '%s\n' 'tmon kill [-n | --name] [-h | --help] [NAMES]...'
  exit
}

function tmon_kill() {
  ARGUMENTS=$(getopt -o "n,h" -l "name,help" -- "$@") || _tmon_kill_help
  eval "set -- ${ARGUMENTS}"
  args=()
  use_name=false
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n|--name)
        use_name=true
    shift
    ;;
      -h|--help)
        _tmon_kill_help
    ;;
      --)
        shift
    ;;
      *)
        args+=("$1")
    shift
    ;;
    esac
  done

  for index in "${args[@]}"; do
    if [ $use_name == true ]; then
      for i in $(_find_panes_by_title $index); do
        tmux kill-pane -t $i
      done
    else
      tmux kill-pane -t $index
    fi
  done
}

function _help() {
  printf "%s\n" "tmon [open | exec | monitor | kill | clear | exit] [...]"
}

subparser=$1
shift

case "$subparser" in
  -h|-help)
    _help
    exit
    ;;
  open)
    tmon_open "$@"
    ;;
  exec)
    tmon_exec "$@"
    ;;
  monitor)
    tmon_monitor "$@"
    ;;
  kill)
    tmon_kill "$@"
    ;;
  clear)
    clear_panes "$@"
    ;;
  exit)
    exit_session
    ;;
  *)
    _help
    exit
    ;;
esac

