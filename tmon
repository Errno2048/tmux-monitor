#!/usr/bin/env bash
sudo=sudo
tmp_path="/tmp/tmon-$(whoami)"

function _abspath() {
  if [ -z "$1" ]; then return; fi
  dirname=$(cd "$(dirname "$1")"; pwd)
  basename=$(basename "$1")
  echo "$dirname/$basename"
}

function _prepare_tmp() {
  if [ ! -d "$tmp_path" ]; then
    if [ -e "$tmp_path" ]; then rm -f "$tmp_path"; fi
    mkdir -p "$tmp_path"
  fi
}

function _check_monitor_arg() {
  while [ $# -gt 0 ]; do
    if [ $(expr index "$1" :) -ne 0 ]; then echo 1; fi
    shift
  done
  echo 0
}

function _escape_monitor_arg() {
  echo "$1" | sed "s/|/ /g"
}

function _get_monitor_file() {
  echo "$tmp_path/monitor"
}

function _monitor_file_check() {
  _prepare_tmp
  monitor_file=$(_get_monitor_file)
  monitor_tmpfile="${monitor_file}.tmp"
  if [ ! -f "$monitor_file" ]; then
    if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
  else
    if [ -f "$monitor_tmpfile" ]; then rm -f "$monitor_tmpfile"; fi
  fi
  num_lines=0
  while IFS= read -r line; do
    if [ -z $(echo "$line" | tr -d '[:space:]') ]; then continue; fi
    line_array=()
    IFS="|" read -r file title pid tmp dead <<< "$line"
    if [ -z "$pid" ]; then
      echo "$line"
      num_lines=$(expr $num_lines + 1)
    else
      if kill -0 "$pid" 2>/dev/null; then
        echo "$line"
        num_lines=$(expr $num_lines + 1)
      else
        if [ -n "$tmp" ]; then
          tmp_stdout=$(_get_tmp_stdout "$tmp")
          if [ -f "$tmp_stdout" ]; then rm -f "$tmp_stdout"; fi
          tmp_stderr=$(_get_tmp_stderr "$tmp")
          if [ -f "$tmp_stderr" ]; then rm -f "$tmp_stderr"; fi
        fi
      fi
    fi
  done < <(cat "$monitor_file"; echo) >> "$monitor_tmpfile"
  if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
}

function _monitor_append() {
  _prepare_tmp
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then touch "$monitor_file"; fi
  if [ $(_check_monitor_arg "$@") -ne 0 ]; then return; fi
  (IFS="|"; echo "$*" >> "$monitor_file")
}

function _monitor_clear() {
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then
    if [ -d "$tmp_path" ]; then
      rm -r "$tmp_path"
    fi
  else
    preserved=()
    preserved_tmp=()
    while IFS= read -r line; do
      if [ -z $(echo "$line" | tr -d '[:space:]') ]; then continue; fi
      line_array=()
      IFS="|" read -r file title pid tmp dead <<< "$line"
      if [ -n "$pid" ]; then
        if kill -0 "$pid" 2>/dev/null; then
          preserved=("${preserved[@]}" "$file|$title|$pid|$tmp|dead")
          preserved_tmp=("${preserved_tmp[@]}" "$(basename "$(_get_tmp_stdout $tmp)")" "$(basename "$(_get_tmp_stderr $tmp)")")
        fi
      fi
    done < <(cat "$monitor_file"; echo)
    find "$tmp_path" -mindepth 1 -maxdepth 1 | while read -r file; do
      if [ -d "$file" ]; then
        rm -rf "$file"
      else
        file_base="$(basename "$file")"
        found=false
        for preserved_file in "${preserved_tmp[@]}"; do
          if [ "$file_base" == "$preserved_file" ]; then found=true; break; fi
        done
        if [ "$found" == true ]; then :; else
          rm -f "$file"
        fi
      fi
    done
    for line in "${preserved[@]}"; do
      echo "$line" >> "$monitor_file"
    done
  fi
}

function _get_monitored_files() {
  monitor_file=$(_get_monitor_file)
  if [ ! -f "$monitor_file" ]; then return; fi
  if [ -z "$1" ]; then num="+0"; else num="$1"; fi
  _monitor_file_check
  tail -n "$num" "$monitor_file" | while IFS= read -r line || [ -n "$line" ]; do
    echo "$line"
  done
}

function _get_tmp_stdout() {
  if [ -z "$1" ]; then return; fi
  echo "${tmp_path}/$1.out"
}

function _get_tmp_stderr() {
  if [ -z "$1" ]; then return; fi
  echo "${tmp_path}/$1.err"
}

function _get_tmp_index() {
  _prepare_tmp
  loop_times=0
  while [ $loop_times -lt 32768 ]; do
    base_index=$(expr $loop_times \* 32768)
    init_index=$RANDOM
    tmp_index=$(expr $(expr $(expr $init_index + 1) % 32768) + $base_index)
    while [ ! $tmp_index == $init_index ]; do
      if [ ! -e $(_get_tmp_stdout "$tmp_index") -a ! -e $(_get_tmp_stderr "$tmp_index") ]; then
        echo "$tmp_index"
        return
      fi
      tmp_index=$(expr $(expr $tmp_index + 1) % 32768)
    done
    loop_times=$(expr $loop_times + 1)
  done
  echo ""; return
}

function _start_session() {
  tmux new -d
  tmux set status-style "bg=black,fg=green"
  tmux set pane-border-format "#{pane_title}"
  tmux set pane-border-status top
  tmux set mouse on
}

function _get_window_width() {
  echo $(tmux display-message -p "#{window_width}" 2>/dev/null)
}

function _set_layout() {
  tmux select-layout main-vertical
  tmux select-pane -t 0
  tmux select-pane -T ""
  tmux resize-pane -x 50% 2>/dev/null
  if [ $? -ne 0 ]; then
    width=$(_get_window_width)
    if [ -n width ]; then tmux resize-pane -x $(expr "${width}" / 2); fi
  fi
}

function _is_attached() {
  if [ -z "$1" ]; then
    sessionid=$(tmux display -p '#S') || sessionid=-1
    if [ ${sessionid} == -1 ]; then return 0; fi
  else
    sessionid=$1
  fi
  attached=$(tmux ls -F '#{session_attached}@#{session_name}' | grep "@${sessionid}" | sed 's/@[0-9]*//g')
  if [ "$attached" == 1 ]; then return 1; fi
  return 0
}

function is_attached() {
  _is_attached "$@" 2>/dev/null
  echo $?
}

function in_session() {
  if [ -n "$TMUX" ]; then echo 1; else echo 0; fi
}

function exit_session() {
  _is_attached 2>/dev/null
  if [ $? == 1 ]; then tmux kill-session; fi
}

function current_pane() {
  if [ -z "$TMUX_PANE" ]; then
    echo -1
  else
    echo $(tmux list-panes -F "#P@#D" | grep "@$TMUX_PANE" | sed "s/@$TMUX_PANE//g")
  fi
}

function _find_panes_by_title() {
  if [ -z "$1" ]; then return; fi
  echo $(tmux list-panes -F "#P:#T" | grep -E "^[0-9]+:.*?$1.*$" | sed "s/:.*//g")
}

function _get_pane_title() {
  if [ -z "$1" ]; then echo ""; return; fi
  width=$(_get_window_width)
  max_title_size=$(expr $(expr "$width" / 2) - 5)
  if [ $max_title_size -gt 4 ]; then
    title=$(echo "$1" | cut -c "-$(expr $max_title_size - 4)")
    echo "[ $title ]"
  else
    title=$(echo "$1" | cut -c "-$max_title_size")
    echo "$title"
  fi
}

function _tmon_ps_help() {
  printf '%s\n' 'tmon ps [--raw] [-h | --help]' \
                'List all monitored files.' \
                '' \
                '  -h, --help    Display this help and exit.' \
                '      --raw     Show raw information.' \
                ''
  exit
}

function tmon_ps() {
  ARGUMENTS=$(getopt -o "h" -l "raw,help" -- "$@" 2>/dev/null) || _tmon_ps_help
  eval "set -- ${ARGUMENTS}"
  
  args=()
  raw_info=false
  while [ $# -gt 0 ]; do
    case "$1" in
      --raw)
        raw_info=true
        shift
        ;;
      -h|--help)
        _tmon_ps_help
        ;;
      --)
        shift
        ;;
      *)
        _tmon_ps_help
        ;;
    esac
  done
  
  if [ "$raw_info" == true ]; then
    _get_monitored_files | while IFS= read -r line || [ -n "$line" ]; do
      IFS="|" read -r file title pid tmp dead <<< "$line"
      echo "$tmp|$file|$title|$pid|$dead"
    done
  else
    info=()
    while IFS= read -r line || [ -n "$line" ]; do
      IFS="|" read -r file title pid tmp dead <<< "$line"
      if [ -n "$dead" ]; then status=closed; else status=open; fi
      if [ -z "$tmp" ]; then tmp=" "; fi
      if [ -z "$file" ]; then file=" "; fi
      if [ -z "$title" ]; then title=" "; fi
      if [ -z "$pid" ]; then pid=" "; fi
      info=("${info[@]}" "$tmp|$status|$pid|$title|$file")
    done < <(_get_monitored_files)
    if [ "${#info[@]}" -gt 0 ]; then
      info=("Monitor ID|Status|PID|Title|File" "${info[@]}")
      for line in "${info[@]}"; do
        echo "$line"
      done | column -t -s "|"
    fi
  fi
}

function _clear_help() {
  printf '%s\n' 'tmon clear [-h | --help]' \
                'Close all panes but preserve file monitors.' \
                '' \
                '  -h, --help    Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon clear    Close all panes.'
                ''
  exit
}

function tmon_clear() {
  ARGUMENTS=$(getopt -o "h" -l "help" -- "$@" 2>/dev/null) || _clear_help
  eval "set -- ${ARGUMENTS}"
  
  args=()
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        _clear_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  if [ $(current_pane) != 0 ]; then tmux swap-pane -U; fi
  tmux kill-pane -a -t 0
}

function _tmon_monitor_help() {
  printf '%s\n' 'tmon monitor [-p | --preserve] [-s | --sudo] [-i | --id] [-a | --all] [-h | --help] [[NPANES] | [ID]...]' \
                '' \
                'Clear all panes and open the last NPANES monitored files. Open 2 files when NPANES is not passed.' \
                '' \
                '  -p, --preserve    Do not close panes before open.' \
                '  -s, --sudo        Use sudo when opening files.' \
                '  -i, --id          Open panes by monitor ID instead.' \
                '  -a, --all         Open all monitors and ignore NPANES or ID.' \
                '  -h, --help        Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon monitor -p 2      Preserve current panes and open the last 2 monitored files.' \
                '  tmon monitor -i 100    Open the monitor of ID 100.' \
                ''
  exit
}

function tmon_monitor() {
  ARGUMENTS=$(getopt -o "c,s,i,a,h" -l "clear,sudo,id,all,help" -- "$@" 2>/dev/null) || _tmon_monitor_help
  eval "set -- ${ARGUMENTS}"

  args=()
  use_sudo=false
  clear=true
  by_id=false
  show_all=false
  while [ $# -gt 0 ]; do
    case "$1" in
      -p|--preserve)
        clear=false
        shift
        ;;
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -i|--id)
        by_id=true
        shift
        ;;
      -a|--all)
        show_all=true
        shift
        ;;
      -h|--help)
        _tmon_monitor_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done
  
  if [ "$clear" == true ]; then
    if [ $(current_pane) != 0 ]; then tmux swap-pane -U; fi
    tmux kill-pane -a -t 0
  fi
  
  attached=$(in_session)
  if [ $attached == 0 ]; then _start_session; fi
  
  target_files=()
  if [ "$by_id" == true -o "$show_all" == true ]; then
    lines=()
    open_dead=false
    while IFS= read -r line || [ -n "$line" ]; do
      IFS="|" read -r file title pid tmp dead <<< "$line"
      success=false
      if [ "$show_all" == true ]; then
        success=true
      else
        for monitor_id in "${args[@]}"; do
          if [ "$monitor_id" == "$tmp" ]; then success=true; break; fi
        done
      fi
      if [ ! $use_sudo == true -a ! -r "$file" ]; then success=false; fi
      if [ $success == true ]; then
        if [ -z "$title" ]; then title=$(basename "$file"); fi
        if [ -n "$dead" ]; then open_dead=true; fi
        target_files=("${target_files[@]}" "$file|$title")
        lines=("${lines[@]}" "$file|$title|$pid|$tmp|")
      else
        lines=("${lines[@]}" "$line")
      fi
    done < <(_get_monitored_files)
    if [ $open_dead == true ]; then
      monitor_file=$(_get_monitor_file)
      monitor_tmpfile="${monitor_file}.tmp"
      if [ ! -f "$monitor_file" ]; then
        if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
      else
        if [ -f "$monitor_tmpfile" ]; then rm -f "$monitor_tmpfile"; fi
      fi
      for line in "${lines[@]}"; do
        echo "$line" >> "$monitor_tmpfile"
      done
      if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
    fi
  else
    if [ -z "${args[0]}" ]; then num_files=2; else num_files="${args[0]}"; fi
    lines=()
    while IFS= read -r line || [ -n "$line" ]; do
      IFS="|" read -r file title pid tmp dead <<< "$line"
      if [ -n "$dead" ]; then continue; fi
      if [ ! $use_sudo == true -a ! -r "$file" ]; then continue; fi
      if [ -z "$title" ]; then title=$(basename "$file"); fi
      lines=("$file|$title" "${lines[@]}")
    done < <(_get_monitored_files)
    for line in "${lines[@]}"; do
      IFS="|" read -r file title <<< "$line"
      target_files=("$file|$title" "${target_files[@]}")
      if [ "${#target_files[@]}" -ge "$num_files" ]; then break; fi
    done
  fi
  
  for file_title in "${target_files[@]}"; do
    IFS="|" read -r file title <<< "$file_title"
    if [ -f "$file" ]; then
      if [ $use_sudo == true ]; then 
        tmux split-window -v "\"$sudo\" tail -n +0 -f \"${file}\""
      else
        if [ ! -r "$file" ]; then continue; fi
        tmux split-window -v "tail -n +0 -f \"${file}\""
      fi
      tmux select-pane -T "$(_get_pane_title "$title")"
    fi
  done
  _set_layout

  if [ $attached == 0 ]; then tmux attach; fi
}

function _tmon_exec_help() {
  printf '%s\n' 'tmon exec [-o] [-e] [--stdout FILE] [--stderr FILE] [-s | --sudo] [-d | --detach]' \
                '          [-t | --title TITLE] [-a | --append] [-h | --help] ARGS...' \
                '' \
                'Execute command and show output in separate tmux panes.' \
                '' \
                '  -o                   Show stdout in a tmux pane.' \
                '  -e                   Show stderr in a tmux pane.' \
                '  -s, --sudo           Use sudo when creating and opening files.' \
                '  -t, --title          Overwrite pane title with specified content.' \
                '  -a, --append         Record stdout and stderr with appending mode.' \
                '  -d, --detach         Monitor the process but do not open panes.' \
                '      --stdout FILE    Record stdout to FILE. Use temporary file when not specified.' \
                '      --stderr FILE    Record stderr to FILE. Use temporary file when not specified.' \
                '  -h, --help           Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon exec -e command    Execute command and show stderr.' \
                '  tmon exec -o --stdout /tmp/stdout.log -a -d command' \
                '      Execute command and append output to /tmp/stdout.log without opening an extra pane.' \
                ''
  exit
}

function tmon_exec() {
  args=()
  use_sudo=false
  detached=false
  stdout_file=
  stderr_file=
  log_stdout=false
  log_stderr=false
  overwrite_title=false
  append=false
  _title=
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -d|--detach)
        detached=true
        shift
        ;;
      -t|--title)
        overwrite_title=true
        _title=$2
        shift 2
        ;;
      -h|--help)
        _tmon_exec_help
        ;;
      -o)
        log_stdout=true
        shift
        ;;
      -e)
        log_stderr=true
        shift
        ;;
      --stdout)
        stdout_file=$2
        shift 2
        ;;
      --stderr)
        stderr_file=$2
        shift 2
        ;;
      -a|--append)
        append=true
        shift
        ;;
      --)
        shift
        ;;
      *)
        args+=("$@")
        break
        ;;
    esac
  done
  
  if [ "${#args[@]}" == 0 ]; then _tmon_exec_help; fi
  
  tmp_index=$(_get_tmp_index)
  if [ -n "$tmp_index" ]; then
    touch $(_get_tmp_stdout "$tmp_index")
  fi
  if [ -z "$stdout_file" -o -z "$stderr_file" ]; then
    if [ -z "$tmp_index" ]; then
      if [ -z "$stdout_file" ]; then stdout_file=nohup.out; fi
      if [ -z "$stderr_file" ]; then stderr_file=nohup.err; fi
    else
      stdout_file=$(_get_tmp_stdout "$tmp_index")
      stderr_file=$(_get_tmp_stderr "$tmp_index")
    fi
  fi
  
  args_string=$(_escape_monitor_arg "${args[*]}")
  if [ "$append" == true ]; then
    redirect=">>\"$stdout_file\" 2>>\"$stderr_file\""
  else
    redirect=">\"$stdout_file\" 2>\"$stderr_file\""
  fi
  if [ "$use_sudo" == true ]; then
    args=("$sudo" nohup sh -c "${args[*]} ${redirect}")
  else
    args=(nohup sh -c "${args[*]} ${redirect}")
  fi
  "${args[@]}" >/dev/null 2>/dev/null &
  pid=$!
  pid=$(pgrep -P "$pid" || echo "$pid")

  if [ ! "$detached" == true ]; then
    attached=$(in_session)
    if [ $attached == 0 ]; then _start_session; fi  
  fi

  if [ "$log_stderr" == true ]; then
    touch "$stderr_file"
    if [ "$overwrite_title" == true ]; then title="stderr ${_title}"; else title="stderr $args_string"; fi
    if [ ! "$detached" == true ]; then
      tmux split-window -v "tail -n +0 -f \"${stderr_file}\""
      tmux select-pane -T "$(_get_pane_title "$title")"
    fi
    abspath=$(_abspath "$stderr_file")
    _monitor_append "$abspath" "$title" "$pid" "$tmp_index" ""
  fi

  if [ "$log_stdout" == true ]; then
    touch "$stdout_file"
    if [ "$overwrite_title" == true ]; then title="stdout ${_title}"; else title="stdout $args_string"; fi
    if [ ! "$detached" == true ]; then
      tmux split-window -v "tail -n +0 -f \"${stdout_file}\""
      tmux select-pane -T "$(_get_pane_title "$title")"
    fi
    abspath=$(_abspath "$stdout_file")
    _monitor_append "$abspath" "$title" "$pid" "$tmp_index" ""
  fi
  
  _monitor_file_check
  
  if [ ! "$detached" == true ]; then
    _set_layout
    if [ $attached == 0 ]; then tmux attach; fi
  fi
}

function _tmon_open_help() {
  printf '%s\n' 'tmon open [-c | --create] [-C | --cut NCOLS] [-s | --sudo] [-f | --full] ' \
                '          [-t | --title TITLE] [-d | --detach] [-h | --help] [FILE]...' \
                '' \
                'Monitor files in separate tmux windows.' \
                '' \
                '  -c, --create    Create target files when not exist.' \
                '  -C, --cut       Show the file with only the first NCOLS characters preserved per row.' \
                '  -s, --sudo      Use sudo when creating and opening files.' \
                '  -d, --detach    Monitor the file but do not open a pane.' \
                '  -f, --full      Show absolute path on pane title.' \
                '  -t, --title     Overwrite pane title with specified content.' \
                '  -h, --help      Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon open -c log.txt          Monitor log.txt with tmux. Create the file when not exist.' \
                '  tmon open -s /var/log/syslog  Monitor /var/log/syslog with root privilege.' \
                ''
  exit
}

function tmon_open() {
  ARGUMENTS=$(getopt -o "s,c,C:,f,t:,d,h" -l "sudo,create,cut:,full,title:,detach,help" -- "$@" 2>/dev/null) || _tmon_open_help
  eval "set -- ${ARGUMENTS}"

  args=()
  use_sudo=false
  detached=false
  absolute_path=false
  create=false
  overwrite_title=false
  title=
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      -d|--detach)
        detached=true
        shift
        ;;
      -c|--create)
        create=true
        shift
        ;;
      -C|--cut)
        cut=$2
        shift 2
        ;;
      -f|--full)
        absolute_path=true
        shift
        ;;
      -t|--title)
        overwrite_title=true
        title=$2
        shift 2
        ;;
      -h|--help)
        _tmon_open_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  if expr "$cut" : '^[0-9]\+$' >/dev/null; then cut=" | cut -c \"-$cut\""; else cut="" ; fi

  if [ ! "$detached" == true ]; then
    attached=$(in_session)
    if [ $attached == 0 ]; then _start_session; fi
  fi
  
  i=0
  while [ $i -lt ${#args[@]} ]; do
    file=${args[$i]}
    if [ ${create} == true -o -f ${file} ]; then
      abspath=$(_abspath "$file")
      if [ $use_sudo == true ]; then 
        if [ ${create} == true -a ! -e ${file} ]; then "$sudo" touch "$file"; fi
        if [ ! "$detached" == true ]; then tmux split-window -v "\"$sudo\" tail -n +0 -f \"${file}\"${cut}"; fi
      else
        if [ ${create} == true -a ! -e ${file} ]; then touch "$file"; fi
        if [ ! "$detached" == true ]; then tmux split-window -v "tail -n +0 -f \"${file}\"${cut}"; fi
      fi
      if [ ${overwrite_title} == false ]; then
        if [ ${absolute_path} == true ]; then title="$abspath"; else title=$(basename "$file"); fi
      fi
      if [ ! "$detached" == true ]; then tmux select-pane -T "$(_get_pane_title "$title")"; fi
      tmp_index=$(_get_tmp_index)
      if [ -n "$tmp_index" ]; then
        dummy_stdout_file=$(_get_tmp_stdout "$tmp_index")
        touch "$dummy_stdout_file"
      fi
      _monitor_append "$abspath" "$title" "" "$tmp_index" ""
    fi
    i=$(expr $i + 1)
  done
  _monitor_file_check
  
  if [ ! "$detached" == true ]; then
    _set_layout
    if [ $attached == 0 ]; then tmux attach; fi
  fi
}

function _tmon_kill_help() {
  printf '%s\n' 'tmon kill [-t | --title] [-f | --file] [-p | --pid] [-P | --process] [-s | --sudo]' \
                '          [--full-match] [-r | --regex] [-h | --help] [--preserve] [-a | --all] [NAMES]...' \
                '' \
                'Remove file monitors and corresponding panes. By default, remove monitors by monitor ID.' \
                '' \
                '  -t, --title         Remove monitors by pane title.' \
                '  -f, --file          Remove monitors by file path.' \
                '      --full-match    When passed, only fully matched files (or titles) will be removed.' \
                '  -r, --regex         Use regular expression matching.' \
                '  -p, --pid           Remove monitors by PID.' \
                '  -P, --process       Kill the corresponding processes.' \
                '  -s, --sudo          Use sudo when killing processes.' \
                '      --preserve      Do not kill corresponding panes.' \
                '  -a, --all           Clear all file monitors.' \
                '  -h, --help          Display this help and exit.' \
                '' \
                'Examples:' \
                '  tmon kill 10          Remove monitor of temporary file 10.' \
                '  tmon kill -t TITLE    Remove monitor with title TITLE.' \
                '  tmon kill -a -P --preserve' \
                '      Remove all file monitors and kill processes but preserve panes.' \
                ''
  exit
}

function tmon_kill() {
  ARGUMENTS=$(getopt -o "t,f,p,P,s,a,h" -l "title,file,pid,process,sudo,help,full-match,all,preserve" -- "$@" 2>/dev/null) || _tmon_kill_help
  eval "set -- ${ARGUMENTS}"

  args=()
  use_sudo=false
  use_name=false
  use_path=false
  use_pid=false
  kill=false
  clear_all=false
  regex=false
  full_match=false
  kill_panes=true
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -t|--title)
        use_name=true
        shift
        ;;
      -f|--file)
        use_path=true
        shift
        ;;
      -p|--pid)
        use_pid=true
        shift
        ;;
      --full-match)
        full_match=true
        shift
        ;;
      -r|--regex)
        regex=true
        shift
        ;;
      -P|--process)
        kill=true
        shift
        ;;
      -s|--sudo)
        use_sudo=true
        shift
        ;;
      --preserve)
        kill_panes=false
        shift
        ;;
      -a|--all)
        clear_all=true
        shift
        ;;
      -h|--help)
        _tmon_kill_help
        ;;
      --)
        shift
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  _prepare_tmp
  monitor_file=$(_get_monitor_file)
  monitor_tmpfile="${monitor_file}.tmp"

  if [ ! -f "$monitor_file" ]; then
    if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
  else
    if [ -f "$monitor_tmpfile" ]; then rm -f "$monitor_tmpfile"; fi
  fi
 
 if [ $clear_all == true ]; then
    _monitor_clear
    if [ $kill == true ]; then
      (cat "$monitor_file"; echo) | while IFS= read -r line; do
        if [ -z $(echo "$line" | tr -d '[:space:]') ]; then continue; fi
        IFS="|" read -r file title pid tmp dead <<< "$line"
        if [ -n "$pid" ]; then
          if [ $use_sudo == true ]; then
            if "$sudo" kill "$pid" >/dev/null 2>/dev/null; then continue; fi
          else
            if kill "$pid" >/dev/null 2>/dev/null; then continue; fi
          fi
          echo "$line" >> "$monitor_tmpfile"
        fi
      done
    fi
    if [ $kill_panes == true ]; then
      tmux kill-pane -a -t 0
      _set_layout
    fi
    if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
    return
  fi
  
  (cat "$monitor_file"; echo) | while IFS= read -r line; do
    if [ -z $(echo "$line" | tr -d '[:space:]') ]; then continue; fi
    IFS="|" read -r file title pid tmp dead <<< "$line"
    if [ -n "$dead" ]; then
      if [ $kill == true ]; then
        if [ $use_sudo == true ]; then
          if "$sudo" kill "$pid" >/dev/null 2>/dev/null; then continue; fi
        else
          if kill "$pid" >/dev/null 2>/dev/null; then continue; fi
        fi
      fi
      echo "$line" >> "$monitor_tmpfile"
      continue
    fi
    matched=false
    if [ $use_name == true -o $use_path == true ]; then
      if [ $use_name == true ]; then target=$title; else target=$file; fi
      for value in "${args[@]}"; do
        if [ $full_match == true ]; then
          if [ $regex == true ]; then
            if [ -n $(echo "$target" | grep -E -x "$value") ]; then matched=true; break; fi
          else
            if [ "$target" == "$value" ]; then matched=true; break; fi
          fi
        else
          if [ $regex == true ]; then
            if [ -n $(echo "$target" | grep -E "$value") ]; then matched=true; break; fi
          else
            if expr "$target" : ".*$value" >/dev/null; then matched=true; break; fi
          fi
        fi
      done
    else
      if [ $use_pid == true ]; then target=$pid; else target=$tmp; fi
      if [ -n "$target" ]; then
        for value in "${args[@]}"; do
          if [ "$target" == "$value" ]; then matched=true; break; fi
        done
      fi
    fi
    if [ $matched == true ]; then
      killed=$kill
      if [ $kill == true -a -n "$pid" ]; then
        if [ $use_sudo == true ]; then
          if "$sudo" kill "$pid" >/dev/null 2>/dev/null; then :; else killed=false; fi
        else
          if kill "$pid" >/dev/null 2>/dev/null; then :; else killed=false; fi
        fi
      fi
      if [ $killed == true -o -z "$pid" ]; then
        if [ -n "$tmp" ]; then
          echo "Killed $tmp"
          tmp_stdout=$(_get_tmp_stdout "$tmp")
          if [ -f "$tmp_stdout" ]; then rm -f "$tmp_stdout"; fi
          tmp_stderr=$(_get_tmp_stderr "$tmp")
          if [ -f "$tmp_stderr" ]; then rm -f "$tmp_stderr"; fi
        else
          echo "Killed"
        fi
      else
        if [ -n "$tmp" ]; then echo "Killed $tmp"; else echo "Killed"; fi
        echo "$file|$title|$pid|$tmp|dead" >> "$monitor_tmpfile"
      fi
      if [ $kill_panes == true -a -n "$title" ]; then
        for pane_id in "$(_find_panes_by_title "$title")"; do
          if [ "$pane_id" == 0 ]; then continue; fi
          tmux kill-pane -t "$pane_id"
        done
      fi
    else
      echo "$line" >> "$monitor_tmpfile"
    fi
  done
  if [ $kill_panes == true ]; then _set_layout; fi
  if [ -f "$monitor_tmpfile" ]; then mv -f "$monitor_tmpfile" "$monitor_file"; else touch "$monitor_file"; fi
}

function _help() {
  printf "%s\n" 'tmon COMMAND [...]' \
                '' \
                'A file and process monitor shell script based on tmux.' \
                '' \
                'Commands:' \
                '  ps       List file monitors.' \
                '  open     Create a file monitor and show file content in a pane.' \
                '  monitor  Show monitored files in panes.' \
                '  kill     Remove a file monitor and corresponding panes.' \
                '  clear    Close other tmux panes.' \
                '  exit     Exit tmux.' \
                '' \
                "Run 'tmon COMMAND --help' for more information on a command." \
                ''
  exit
}

subparser=$1
shift

case "$subparser" in
  -h|-help)
    _help
    exit
    ;;
  ps)
    tmon_ps "$@"
    ;;
  open)
    tmon_open "$@"
    ;;
  exec)
    tmon_exec "$@"
    ;;
  monitor)
    tmon_monitor "$@"
    ;;
  kill)
    tmon_kill "$@"
    ;;
  clear)
    tmon_clear "$@"
    ;;
  exit)
    exit_session
    ;;
  *)
    _help
    ;;
esac

